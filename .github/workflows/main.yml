# This name will show up in the GitHub "Actions" tab
name: CI/CD Pipeline for .NET URL Shortener

# This tells GitHub to run the pipeline on every push to the "main" branch
on:
  push:
    branches: [ "main" ]

# --- IMPORTANT: Set your image name here ---
# Make sure this is "your-dockerhub-username/your-dockerhub-repo-name"
env:
  DOCKER_IMAGE_NAME: testergood/urlproject # <-- Double-check this username!

# Define the jobs that will run
jobs:
  build-and-push:
    # Use the latest Ubuntu runner
    runs-on: ubuntu-latest
    
    steps:
      # 1. Check out your code from the repository
      - name: Check out code
        uses: actions/checkout@v4

      # 2. Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x' # Match your project's .NET version
      
      # 3. Log in to Docker Hub
      #    Uses the secrets you'll create in GitHub settings
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }} # <-- THE FIX IS HERE

      # 4. Build and push the Docker image
      #    This finds your Dockerfile and runs it
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .  # Tells it to find the Dockerfile in the root
          push: true
          tags: ${{ env.DOCKER_IMAGE_NAME }}:latest

  deploy:
    # This job only runs if the "build-and-push" job finished successfully
    needs: build-and-push
    runs-on: ubuntu-latest
    
    steps:
      # 1. Trigger the Render deploy hook
      #    This sends a web request to Render to tell it to deploy
      - name: Deploy to Render
        run: curl "${{ secrets.RENDER_DEPLOY_HOOK }}"